// jenkins/Jenkinsfile - Final Definitive Version

pipeline {
    // Define one powerful agent pod for the entire pipeline
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: default
  containers:
  # The main build agent, based on a standard Ubuntu OS
  # All our steps will run in here after we install the tools.
  - name: build-agent
    image: ubuntu:22.04
    # We need to run as root to install software with apt-get
    securityContext:
      runAsUser: 0
    command:
    - sleep
    args:
    - 99d
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
  # The Docker-in-Docker sidecar container
  - name: dind
    image: docker:20.10.17-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
'''
        }
    }

    environment {
        ECR_REGISTRY    = "619071318781.dkr.ecr.us-east-1.amazonaws.com"
        APP_NAME        = "hello-world"
        IMAGE_TAG       = env.GIT_COMMIT.take(7)
        ECR_REPO_NAME   = "hello-world-app"
    }

    stages {
        stage('Initialize Build Environment') {
            steps {
                // All steps will now run in the 'build-agent' container
                container('build-agent') {
                    sh '''
                    echo "Installing all necessary tools..."
                    # Set frontend to noninteractive to prevent apt-get from asking questions
                    export DEBIAN_FRONTEND=noninteractive
                    # Use apt-get, the correct package manager for Ubuntu
                    apt-get update
                    apt-get install -y openjdk-17-jdk maven git curl python3-pip
                    
                    # Install AWS CLI
                    pip3 install awscli

                    # Install kubectl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                    
                    # Install Docker client
                    curl -fsSL https://get.docker.com -o get-docker.sh
                    sh get-docker.sh
                    
                    echo "Tool installation complete."
                    '''
                }
            }
        }

        stage('Checkout') {
            steps {
                // This now runs in the same, persistent 'build-agent' container
                checkout scm
            }
        }

        stage('Build & Analyze') {
            steps {
                container('build-agent') {
                    sh 'mvn clean package'
                    stash includes: 'target/*.jar', name: 'app-jar'
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_AUTH_TOKEN'
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                container('build-agent') {
                    unstash 'app-jar'
                    sh """
                    echo "Waiting for Docker daemon..."
                    while ! docker info; do
                      sleep 1
                    done
                    echo "Docker daemon is ready."

                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    aws ecr create-repository --repository-name ${ECR_REPO_NAME} --region us-east-1 || true
                    docker build -t ${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG} .
                    docker push ${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                container('build-agent') {
                    withCredentials([file(credentialsId: 'kubeconfig-dev', variable: 'KUBECONFIG_FILE')]) {
                        sh '''
                        echo "Deploying to development cluster..."
                        kubectl --kubeconfig $KUBECONFIG_FILE apply -f kubernetes/ -n development
                        kubectl --kubeconfig $KUBECONFIG_FILE set image deployment/hello-world-deployment hello-world-app=${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG} -n development
                        '''
                    }
                }
            }
        }
    }
}