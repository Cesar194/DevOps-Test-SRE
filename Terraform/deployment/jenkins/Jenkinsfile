// jenkins/Jenkinsfile - Final Definitive Version

pipeline {
    agent {
        kubernetes {
            defaultContainer 'build-agent'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: default
  containers:
  - name: build-agent
    image: ubuntu:22.04
    securityContext:
      runAsUser: 0
    command:
    - sleep
    args:
    - 99d
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
  - name: dind
    image: docker:20.10.17-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
'''
        }
    }

    environment {
        ECR_REGISTRY    = "619071318781.dkr.ecr.us-east-1.amazonaws.com"
        APP_NAME        = "hello-world"
        IMAGE_TAG       = env.GIT_COMMIT.take(7)
        ECR_REPO_NAME   = "hello-world-app"
    }

    stages {
        stage('Initialize Build Environment & Checkout') {
            steps {
                sh '''
                echo "Installing all necessary tools..."
                export DEBIAN_FRONTEND=noninteractive
                apt-get update && apt-get install -y openjdk-17-jdk maven git curl python3-pip docker.io
                pip3 install awscli
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                echo "Tool installation complete."
                '''
                checkout scm
            }
        }

        stage('Build & Analyze') {
            steps {
                sh 'mvn clean package'
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_AUTH_TOKEN'
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                // The .jar file from the build stage is available because we use a single agent
                sh """
                echo "Waiting for Docker daemon..."
                while ! docker info; do
                  sleep 1
                done
                echo "Docker daemon is ready."

                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                aws ecr create-repository --repository-name ${ECR_REPO_NAME} --region us-east-1 || true
                docker build -t ${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG} .
                docker push ${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}
                """
            }
        }

        stage('Deploy to Development') {
            steps {
                // --- THIS STAGE IS NOW CORRECTED ---
                // It now loads the dedicated AWS credentials for the development cluster
                withCredentials([
                    file(credentialsId: 'kubeconfig-dev', variable: 'KUBECONFIG_FILE'),
                    string(credentialsId: 'DEV_AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'DEV_AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                    echo "Deploying to development cluster..."
                    # The AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables will be
                    # automatically used by kubectl when it calls 'aws eks get-token'.
                    
                    kubectl --kubeconfig $KUBECONFIG_FILE apply -f Terraform/development/kubernetes/ -n development
                    kubectl --kubeconfig $KUBECONFIG_FILE set image deployment/hello-world-deployment hello-world-app=${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG} -n development
                    '''
                }
            }
        }
    }
}
